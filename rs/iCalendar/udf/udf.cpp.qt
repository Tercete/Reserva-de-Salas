/*
	Reserva de Salas
	Copyright 2007 Gianfranco Rossi.

	Este programa é software livre; você pode redistribuí-lo e/ou
	modificá-lo sob os termos da Licença Pública Geral GNU, conforme
	publicada pela Free Software Foundation; tanto a versão 2 da
	Licença.

	Este programa é distribuído na expectativa de ser útil, mas SEM
	QUALQUER GARANTIA; sem mesmo a garantia implícita de
	COMERCIALIZAÇÃO ou de ADEQUAÇÃO A QUALQUER PROPÓSITO EM
	PARTICULAR. Consulte a Licença Pública Geral GNU para obter mais
	detalhes.

	Você deve ter recebido uma cópia da Licença Pública Geral GNU
	junto com este programa; se não, escreva para a Free Software
	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
	02111-1307, USA.
 */

/* 
   Example from http://tools.ietf.org/html/rfc2447

   From: sman@netscape.com
   To: stevesil@microsoft.com
   Subject: Phone Conference
   Mime-Version: 1.0
   Content-Type:text/calendar; method=REQUEST; charset=US-ASCII
   Content-Transfer-Encoding: 7bit

   BEGIN:VCALENDAR
   PRODID:-//ACME/DesktopCalendar//EN
   METHOD:REQUEST
   VERSION:2.0
   BEGIN:VEVENT
   ORGANIZER:mailto:sman@netscape.com
   ATTENDEE;ROLE=CHAIR;ATTSTAT=ACCEPTED:mailto:sman@netscape.com
   ATTENDEE;RSVP=YES:mailto:stevesil@microsoft.com
   DTSTAMP:19970611T190000Z
   DTSTART:19970701T210000Z
   DTEND:19970701T230000Z
   SUMMARY:Phone Conference
   DESCRIPTION:Please review the attached document.
   UID:calsvr.example.com-873970198738777
   ATTACH:ftp://ftp.bar.com/pub/docs/foo.doc
   STATUS:CONFIRMED
   END:VEVENT
   END:VCALENDAR
*/

#include <ptypes.h>

#include <ibase.h>
#include <ib_util.h>

#include <time.h>

//#include <QString>
//#include <QFile>
//#include <QUrl>
//#include <QDateTime>
//#include <QMutex>
//#include <QMutexLocker>

#include <libesmtp.h>
#include <auth-client.h>

#ifdef MT
	#define STATIC_MT 
	#define MUTEX_LOCK QMutexLocker( m_mutex )
#else
	#define STATIC_MT static
	#define MUTEX_LOCK
#endif

USING_PTYPES

class smtpConfig_c 
{
	private:
#ifdef MT
		QMutex		m_mutex;
#endif
		string		m_host;
		
	public:
		void setHost( QString value )
		{
			MUTEX_LOCK;
			m_host = value; 
		}
		
		char * host() const
		{
			MUTEX_LOCK;
			return m_host.toAscii().data();
		}
		
		
};

static smtpConfig_c smtpConfig;

QDateTime IsctstoDateTime( ISC_TIMESTAMP * ts )
{
	STATIC_MT tm time;
	isc_decode_timestamp( ts, &time );
	
	return QDateTime( QDate( time.tm_year + 1900, time.tm_mon, time.tm_mday ),
		QTime( time.tm_hour, time.tm_min, time.tm_sec ));
}

char * stringToChar( const QString s )
{
	STATIC_MT QByteArray array;
	STATIC_MT char *data, *result, *p, *q;

	array = s.toAscii();
	data = array.data();
	
	result = static_cast<char*>( ib_util_malloc( strlen( data )));
	
	p = result;
	q = data;
	
	while ( *q )
		*q++ = *p++;

	return result;
}

QString BlobToString( BLOBCALLBACK blob )
{
	STATIC_MT QString result;
#ifdef MT
	result.clear();
#endif
	
	if ( blob && blob->blob_handle )
	{
		int length = blob->blob_max_segment + 1L;
		ISC_UCHAR * buffer = static_cast<ISC_UCHAR*>( malloc( length ) );
		
		ISC_USHORT readLength = 0;

		while ( (*blob->blob_get_segment) ( blob->blob_handle, buffer, length, &readLength ) )
		{
			buffer[ readLength ] = 0;
			
			// I know, the double cast looks ugly; but it works!
			result += QString::fromAscii( static_cast<char*>( static_cast<void*>( buffer )));
		}

		delete buffer;
	}

	return result;
}

QString sendMail( QString data )
{
	smtp_session_t session;
	smtp_message_t message;
	smtp_recipient_t recipient;
	auth_context_t authctx;
	
	auth_client_init ();
	session = smtp_create_session ();
	message = smtp_add_message (session);
	
	
	smtp_starttls_enable (session, Starttls_ENABLED);
	smtp_starttls_enable (session, Starttls_REQUIRED);
	
	smtp_set_server( session, smtpConfig.host() );
}

extern "C" 
{
	
void set_stmp( )
{
}

extern char * icalendar( char * uid, char * from, char * to, char * subject, BLOBCALLBACK description, 
		char * location, ISC_TIMESTAMP * tsStart, ISC_TIMESTAMP * tsEnd, 
		int * opr )
{
	#define s( STRING ) QString::fromAscii( STRING )

	QString method, status;

	switch ( *opr )
	{
		case 0: // Insert
		case 1: // Update 
			method = "PUBLISH";
			status = "CONFIRMED";
			break;

		case 2: // Delete
			method = "CANCEL";
			status = "CANCELLED";
			break;

		default: return stringToChar( "Illegal opr code" ); // Shouldn't happen!
	}

	QDateTime dtStart = IsctstoDateTime( tsStart ),
		dtEnd = IsctstoDateTime( tsEnd );
	
	QString descr = BlobToString( description );

	descr.replace( "\x0D\x0A", "\\n\n  " );
	descr.replace( "\x0A", "\\n\n  " );
	descr.replace( "\x0D", "\\n\n  " );

	QString str;

	str = s( "From: " ) + from + '\n' +
		s( "To: " ) + to + '\n' +
		s( "Subject: " ) + subject + '\n' +
		s( "Mime-Version: 1.0\n" ) +
		s( "Content-Type:text/calendar; method=" ) + method + s( "; charset=US-ASCII\n" ) +
		s( "Content-Transfer-Encoding: 7bit\n\n" ) + 
		
		s( "BEGIN:VCALENDAR\n" ) +
		s( "METHOD:" ) + method + '\n' +
		s( "VERSION:2.0\n" ) +
		s( "BEGIN:VEVENT\n" ) +
		s( "ORGANIZER:mailto:" ) + from + '\n' +
		s( "ATTENDEE;RSVP=FALSE\n" ) +
		s( "DTSTAMP:" ) + QDateTime::currentDateTime().toString( Qt::ISODate ) + '\n' +
		s( "DTSTART:" ) + dtStart.toString( Qt::ISODate ) + '\n' +
		s( "DTEND:" ) + dtEnd.toString( Qt::ISODate ) + '\n' +
		s( "SUMMARY:" ) + subject + '\n' +
		s( "DESCRIPTION:" ) + descr + '\n' +
		s( "LOCATION:") + location + '\n' +
		s( "UID:" ) + uid + '\n' +
		s( "STATUS:" ) + status + '\n' +
		s( "END:VEVENT\n" ) +
		s( "END:VCALENDAR\n" );

	QFile file("/tmp/ical.txt");
	file.open( QIODevice::WriteOnly | QIODevice::Append );

	file.write( str.toAscii() );
	file.write( QString("\n").toAscii() );

	QString result = sendMail( str );
	
	file.write( result.toAscii() );
	file.write( QString("\n\n").toAscii() );
	
	return stringToChar( result );
}

} // extern "C"
