/* SQL Manager 2005 for InterBase and Firebird 4.3.0.1 */
/* --------------------------------------------------- */
/* Host     : localhost                                */
/* Database : RS                                       */


CREATE DATABASE 'localhost:RS'   USER 'SYSDBA'
   PAGE_SIZE 4096
   DEFAULT CHARACTER SET ISO8859_1;


/* Definition for the `GENMODELOS` generator :  */

CREATE GENERATOR GENMODELOS;

/* Definition for the `GENRESERVAS` generator :  */

CREATE GENERATOR GENRESERVAS;

/* Definition for the `GENUSUARIOS` generator :  */

CREATE GENERATOR GENUSUARIOS;

/* Definition for the `IFM$REPORTS_ID_GEN` generator :  */

CREATE GENERATOR IFM$REPORTS_ID_GEN;

/* Definition for the `SEQRESERVAS` generator :  */

CREATE GENERATOR SEQRESERVAS;


/* Definition for the `EXPRESERVAHORA` exception :  */

CREATE EXCEPTION EXPRESERVAHORA 'JA EXISTE UMA RESERVA NESSE HORARIO';


/* Definition for the `MOD` UDF :  */

DECLARE EXTERNAL FUNCTION MOD
  INTEGER,
  INTEGER
RETURNS DOUBLE PRECISION BY VALUE
ENTRY_POINT 'IB_UDF_mod' MODULE_NAME 'ib_udf';


/* Definition for the `CREATE_RESERVA_MENSAL` procedure :  */

SET TERM ^ ;

CREATE PROCEDURE CREATE_RESERVA_MENSAL(
  RESERVAID INTEGER,
  SALAID INTEGER,
  USUARIOID INTEGER,
  ASSUNTO VARCHAR(255) CHARACTER SET ISO8859_1,
  DEPTO VARCHAR(80) CHARACTER SET ISO8859_1,
  NOTAS BLOB SUB_TYPE 1 CHARACTER SET ISO8859_1,
  DATAIN DATE,
  DATAFIM DATE,
  HORAIN TIME,
  HORAFIM TIME,
  DIA_S INTEGER,
  ORDEM INTEGER)
RETURNS(
  OUT_RESERVAID INTEGER,
  SEQ INTEGER)
AS
BEGIN
  EXIT;
END^

SET TERM ; ^

/* Definition for the `CREATE_RESERVA_SEMANAL` procedure :  */

SET TERM ^ ;

CREATE PROCEDURE CREATE_RESERVA_SEMANAL(
  RESERVAID INTEGER,
  SALAID INTEGER,
  USUARIOID INTEGER,
  ASSUNTO VARCHAR(255) CHARACTER SET ISO8859_1,
  DEPTO VARCHAR(80) CHARACTER SET ISO8859_1,
  NOTAS BLOB SUB_TYPE 1 CHARACTER SET ISO8859_1,
  DATAIN DATE,
  DATAFIM DATE,
  HORAIN TIME,
  HORAFIM TIME,
  SEG SMALLINT,
  TER SMALLINT,
  QUA SMALLINT,
  QUI SMALLINT,
  SEX SMALLINT,
  SAB SMALLINT,
  DOM SMALLINT,
  REVESA SMALLINT)
RETURNS(
  OUT_RESERVAID INTEGER,
  SEQ INTEGER)
AS
DECLARE VARIABLE I INT;
    DECLARE VARIABLE ID INT;
    DECLARE VARIABLE OLD_TIPO CHAR;
BEGIN
  EXIT;
END^

SET TERM ; ^

/* Definition for the `CREATE_RESERVA_SIMPLES` procedure :  */

SET TERM ^ ;

CREATE PROCEDURE CREATE_RESERVA_SIMPLES(
  RESERVAID INTEGER,
  SALAID INTEGER,
  USUARIOID INTEGER,
  ASSUNTO VARCHAR(255) CHARACTER SET ISO8859_1,
  DEPTO VARCHAR(80) CHARACTER SET ISO8859_1,
  NOTAS BLOB SUB_TYPE 1 CHARACTER SET ISO8859_1,
  DATA DATE,
  HORAIN TIME,
  HORAFIM TIME)
RETURNS(
  OUT_RESERVAID INTEGER,
  SEQ INTEGER)
AS
DECLARE VARIABLE I INT;
    DECLARE VARIABLE ID INT;
    DECLARE VARIABLE OLD_TIPO CHAR;
BEGIN
  EXIT;
END^

SET TERM ; ^

/* Definition for the `GET_RESERVAS_SEMANA` procedure :  */

SET TERM ^ ;

CREATE PROCEDURE GET_RESERVAS_SEMANA(
  START DATE,
  ENDDT DATE)
RETURNS(
  RESERVAID INTEGER,
  SALAID INTEGER,
  DATA DATE,
  HORAIN TIME,
  HORAFIM TIME,
  USUARIOID INTEGER,
  USUARIO_NOME VARCHAR(255) CHARACTER SET ISO8859_1,
  ASSUNTO VARCHAR(255) CHARACTER SET ISO8859_1,
  DEPTO VARCHAR(80) CHARACTER SET ISO8859_1,
  NOTAS BLOB SUB_TYPE 1 CHARACTER SET ISO8859_1,
  SCHEMEID INTEGER,
  SEQ INTEGER,
  TIPO CHAR(1) CHARACTER SET ISO8859_1,
  DATAIN DATE,
  DATAFIM DATE)
AS
DECLARE VARIABLE I INTEGER;
DECLARE VARIABLE DOW INTEGER;
DECLARE VARIABLE DOM INTEGER;
DECLARE VARIABLE SEG INTEGER;
DECLARE VARIABLE TER INTEGER;
DECLARE VARIABLE QUA INTEGER;
DECLARE VARIABLE QUI INTEGER;
DECLARE VARIABLE SEX INTEGER;
DECLARE VARIABLE SAB INTEGER;
BEGIN
  EXIT;
END^

SET TERM ; ^

/* Definition for the `GET_SEMANAL_DIAS` procedure :  */

SET TERM ^ ;

CREATE PROCEDURE GET_SEMANAL_DIAS(
  RESERVAID INTEGER,
  DATAIN DATE,
  DATAFIM DATE)
RETURNS(
  DIAS DATE)
AS
DECLARE VARIABLE SEG SMALLINT;
DECLARE VARIABLE TER SMALLINT;
DECLARE VARIABLE QUA SMALLINT;
DECLARE VARIABLE QUI SMALLINT;
DECLARE VARIABLE SEX SMALLINT;
DECLARE VARIABLE SAB SMALLINT;
DECLARE VARIABLE DOM SMALLINT;
DECLARE VARIABLE VDATAIN DATE;
DECLARE VARIABLE VDATAFIM DATE;
DECLARE VARIABLE REVESA SMALLINT;
DECLARE VARIABLE I SMALLINT;
BEGIN
  EXIT;
END^

SET TERM ; ^


/* Structure for the `COLOR_SCHEME` table :  */

CREATE TABLE COLOR_SCHEME (
  SCHEMEID INTEGER NOT NULL,
  BACKGROUND INTEGER,
  FONT INTEGER,
  BORDER INTEGER);


ALTER TABLE COLOR_SCHEME ADD CONSTRAINT PKCOLOR_SCHEME PRIMARY KEY (SCHEMEID);


/* Structure for the `DEL$RESERVAS` table :  */

CREATE TABLE DEL$RESERVAS (
  RESERVAID INTEGER,
  SEQ INTEGER NOT NULL,
  DATA_DEL DATE DEFAULT CURRENT_DATE);


CREATE INDEX IDXDEL$RESERVASDATA_DEL ON DEL$RESERVAS(DATA_DEL);

CREATE UNIQUE INDEX IDXDEL$RESERVASSEQ ON DEL$RESERVAS(SEQ);


/* Structure for the `MODELOS` table :  */

CREATE TABLE MODELOS (
  MODELOID INTEGER NOT NULL,
  NOME VARCHAR(60) CHARACTER SET ISO8859_1 NOT NULL COLLATE PT_PT,
  BODY BLOB SUB_TYPE 1 CHARACTER SET ISO8859_1,
  ITEM BLOB SUB_TYPE 1 CHARACTER SET ISO8859_1,
  FUNDO VARCHAR(60) CHARACTER SET ISO8859_1 COLLATE ISO8859_1,
  FUNDOALT VARCHAR(60) CHARACTER SET ISO8859_1 COLLATE ISO8859_1);


ALTER TABLE MODELOS ADD CONSTRAINT PKMODELOS PRIMARY KEY (MODELOID);


CREATE UNIQUE INDEX IDXMODELONOME ON MODELOS(NOME);


/* Structure for the `RESERVAS` table :  */

CREATE TABLE RESERVAS (
  RESERVAID INTEGER NOT NULL,
  TIPO CHAR(1) CHARACTER SET ISO8859_1 NOT NULL COLLATE ISO8859_1,
  SALAID INTEGER NOT NULL,
  USUARIOID INTEGER NOT NULL,
  ASSUNTO VARCHAR(255) CHARACTER SET ISO8859_1 NOT NULL COLLATE ISO8859_1,
  DEPTO VARCHAR(80) CHARACTER SET ISO8859_1 COLLATE ISO8859_1,
  NOTAS BLOB SUB_TYPE 1 CHARACTER SET ISO8859_1,
  SEQ INTEGER);


ALTER TABLE RESERVAS ADD CONSTRAINT PKRESERVAS PRIMARY KEY (RESERVAID);

CREATE UNIQUE INDEX IDXRESERVASEQ ON RESERVAS(SEQ);


/* Structure for the `RESERVA_MENSAL` table :  */

CREATE TABLE RESERVA_MENSAL (
  RESERVAID INTEGER NOT NULL,
  DATAIN DATE NOT NULL,
  DATAFIM DATE NOT NULL,
  HORAIN TIME NOT NULL,
  HORAFIM TIME NOT NULL,
  DIA_S INTEGER NOT NULL,
  ORDEM INTEGER NOT NULL);

CREATE INDEX IDXRESERVA_MENSAL_DATA ON RESERVA_MENSAL(DATAIN,DATAFIM);

CREATE INDEX IDXRESERVA_MENSAL_HORA ON RESERVA_MENSAL(HORAIN,HORAFIM);


/* Structure for the `RESERVA_SEMANAL` table :  */

CREATE TABLE RESERVA_SEMANAL (
  RESERVAID INTEGER NOT NULL,
  DATAIN DATE NOT NULL,
  DATAFIM DATE NOT NULL,
  HORAIN TIME NOT NULL,
  HORAFIM TIME NOT NULL,
  SEG SMALLINT DEFAULT 0 NOT NULL,
  TER SMALLINT DEFAULT 0 NOT NULL,
  QUA SMALLINT DEFAULT 0 NOT NULL,
  QUI SMALLINT DEFAULT 0 NOT NULL,
  SEX SMALLINT DEFAULT 0 NOT NULL,
  SAB SMALLINT DEFAULT 0 NOT NULL,
  DOM SMALLINT DEFAULT 0 NOT NULL,
  REVESA SMALLINT DEFAULT 0 NOT NULL);

CREATE INDEX IDXRESERVA_SEMANAL_DATA ON RESERVA_SEMANAL(DATAIN,DATAFIM);

CREATE INDEX IDXRESERVA_SEMANAL_HORA ON RESERVA_SEMANAL(HORAIN,HORAFIM);


/* Structure for the `RESERVA_SIMPLES` table :  */

CREATE TABLE RESERVA_SIMPLES (
  RESERVAID INTEGER NOT NULL,
  DATA DATE NOT NULL,
  HORAIN TIME NOT NULL,
  HORAFIM TIME NOT NULL);

CREATE INDEX IDXRESERVA_SIMPLES ON RESERVA_SIMPLES(DATA,HORAIN);


/* Structure for the `SALAS` table :  */

CREATE TABLE SALAS (
  SALAID INTEGER NOT NULL,
  ANDAR INTEGER,
  NOME VARCHAR(80) CHARACTER SET ISO8859_1 COLLATE ISO8859_1);


ALTER TABLE SALAS ADD CONSTRAINT PKSALAS PRIMARY KEY (SALAID);


/* Structure for the `USUARIOS` table :  */

CREATE TABLE USUARIOS (
  USUARIOID INTEGER NOT NULL,
  LOGIN VARCHAR(80) CHARACTER SET ISO8859_1 NOT NULL COLLATE PT_PT,
  NOME VARCHAR(300) CHARACTER SET ISO8859_1 NOT NULL COLLATE ISO8859_1,
  STYLE VARCHAR(120) CHARACTER SET ISO8859_1 COLLATE ISO8859_1,
  SCHEMEID INTEGER,
  NIVEL INTEGER);


ALTER TABLE USUARIOS ADD CONSTRAINT PKUSUARIOS PRIMARY KEY (USUARIOID);

CREATE UNIQUE INDEX IDXUSUARIO_LOGIN ON USUARIOS(LOGIN);


/* Definition for the `CREATE_RESERVA_MENSAL` procedure :  */

SET TERM ^ ;

ALTER PROCEDURE CREATE_RESERVA_MENSAL(
  RESERVAID INTEGER,
  SALAID INTEGER,
  USUARIOID INTEGER,
  ASSUNTO VARCHAR(255) CHARACTER SET ISO8859_1,
  DEPTO VARCHAR(80) CHARACTER SET ISO8859_1,
  NOTAS BLOB SUB_TYPE 1 CHARACTER SET ISO8859_1,
  DATAIN DATE,
  DATAFIM DATE,
  HORAIN TIME,
  HORAFIM TIME,
  DIA_S INTEGER,
  ORDEM INTEGER)
RETURNS(
  OUT_RESERVAID INTEGER,
  SEQ INTEGER)
AS
BEGIN
END^

SET TERM ; ^

/* Definition for the `CREATE_RESERVA_SEMANAL` procedure :  */

SET TERM ^ ;

ALTER PROCEDURE CREATE_RESERVA_SEMANAL(
  RESERVAID INTEGER,
  SALAID INTEGER,
  USUARIOID INTEGER,
  ASSUNTO VARCHAR(255) CHARACTER SET ISO8859_1,
  DEPTO VARCHAR(80) CHARACTER SET ISO8859_1,
  NOTAS BLOB SUB_TYPE 1 CHARACTER SET ISO8859_1,
  DATAIN DATE,
  DATAFIM DATE,
  HORAIN TIME,
  HORAFIM TIME,
  SEG SMALLINT,
  TER SMALLINT,
  QUA SMALLINT,
  QUI SMALLINT,
  SEX SMALLINT,
  SAB SMALLINT,
  DOM SMALLINT,
  REVESA SMALLINT)
RETURNS(
  OUT_RESERVAID INTEGER,
  SEQ INTEGER)
AS
DECLARE VARIABLE I INT;
    DECLARE VARIABLE ID INT;
    DECLARE VARIABLE OLD_TIPO CHAR;
BEGIN
    FOR
        SELECT
            EXTRACT(WEEKDAY FROM RS.DATA)
        FROM
            RESERVAS R JOIN RESERVA_SIMPLES RS ON
                R.RESERVAID = RS.RESERVAID
        WHERE
            (:SALAID = R.SALAID) AND 
            ((RS.DATA>= :DATAIN) AND (:DATAFIM IS NULL OR RS.DATA <= :DATAFIM)) AND
                (((:HORAIN >= RS.HORAIN) AND (:HORAIN < RS.HORAFIM))
                OR
                ((:HORAFIM > RS.HORAIN) AND (:HORAFIM <= RS.HORAFIM))
                OR
                ((:HORAIN <= RS.HORAIN) AND (:HORAFIM > RS.HORAIN)))
        INTO
            :I
    DO
    BEGIN
        IF (((NOT :SEG IS NULL) AND :SEG != 0 AND :I = 1) OR
            ((NOT :TER IS NULL) AND :TER != 0 AND :I = 2) OR
            ((NOT :QUA IS NULL) AND :QUA != 0 AND :I = 3) OR
            ((NOT :QUI IS NULL) AND :QUI != 0 AND :I = 4) OR
            ((NOT :SEX IS NULL) AND :SEX != 0 AND :I = 5) OR
            ((NOT :SAB IS NULL) AND :SAB != 0 AND :I = 6) OR
            ((NOT :DOM IS NULL) AND :DOM != 0 AND :I = 0)) THEN
            EXCEPTION EXPRESERVAHORA;
    END

    SELECT FIRST 1
        RS.RESERVAID
    FROM
        RESERVAS R JOIN RESERVA_SEMANAL RS ON
            R.RESERVAID = RS.RESERVAID
    WHERE
        (R.RESERVAID != :RESERVAID)
        AND (:SALAID = R.SALAID)
        AND
            (
            ((:DATAIN >= RS.DATAIN) AND (:DATAIN < RS.DATAFIM))
            OR
            ((:DATAFIM > RS.DATAIN) AND (:DATAFIM <= RS.DATAFIM))
            OR
            ((:DATAIN <= RS.DATAIN) AND (:DATAFIM > RS.DATAIN))
            )
        AND
            (
            ((:HORAIN >= RS.HORAIN) AND (:HORAIN < RS.HORAFIM))
            OR
            ((:HORAFIM > RS.HORAIN) AND (:HORAFIM <= RS.HORAFIM))
            OR
            ((:HORAIN <= RS.HORAIN) AND (:HORAFIM > RS.HORAIN))
            )
        AND
            (
            ((NOT :SEG IS NULL) AND :SEG != 0 AND RS.SEG = 1) OR
            ((NOT :TER IS NULL) AND :TER != 0 AND RS.TER = 1) OR
            ((NOT :QUA IS NULL) AND :QUA != 0 AND RS.QUA = 1) OR
            ((NOT :QUI IS NULL) AND :QUI != 0 AND RS.QUI = 1) OR
            ((NOT :SEX IS NULL) AND :SEX != 0 AND RS.SEX = 1) OR
            ((NOT :SAB IS NULL) AND :SAB != 0 AND RS.SAB = 1) OR
            ((NOT :DOM IS NULL) AND :DOM != 0 AND RS.DOM = 1)
            )
        AND
            (
            (:REVESA IS NULL) OR (:REVESA = 0) OR
            (RS.REVESA IS NULL) OR (RS.REVESA = 0) OR
            ((:REVESA = 1) AND (RS.REVESA = 1) AND
             (MOD((:DATAIN - RS.DATAIN) / 7, 2) = 0)
             )
            )
    INTO
        I;

    IF (NOT (I IS NULL)) THEN
        EXCEPTION EXPRESERVAHORA;

    SEQ = GEN_ID(SEQRESERVAS, 1);

    IF ((:RESERVAID IS NULL) OR (:RESERVAID < 0)) THEN  
    BEGIN
        OUT_RESERVAID = GEN_ID(GENRESERVAS, 1);

        INSERT INTO
            RESERVAS (RESERVAID, SALAID, USUARIOID, ASSUNTO, DEPTO, NOTAS, SEQ, TIPO)
        VALUES
            (:OUT_RESERVAID, :SALAID, :USUARIOID, :ASSUNTO, :DEPTO, :NOTAS, :SEQ, 'W');

        INSERT INTO
            RESERVA_SEMANAL (RESERVAID, DATAIN, DATAFIM, HORAIN, HORAFIM, SEG, TER, 
                                            QUA, QUI, SEX, SAB, DOM, REVESA)
        VALUES (:OUT_RESERVAID, :DATAIN, :DATAFIM, :HORAIN, :HORAFIM, :SEG, :TER, :QUA, 
                        :QUI, :SEX, :SAB, :DOM, :REVESA);
    END
    ELSE
    BEGIN
        OUT_RESERVAID = :RESERVAID;

        SELECT
            TIPO
        FROM
            RESERVAS
        WHERE
            RESERVAID = :RESERVAID
        INTO
            :OLD_TIPO;

        UPDATE
            RESERVAS
        SET
            SALAID = :SALAID, 
            USUARIOID = :USUARIOID, 
            ASSUNTO = :ASSUNTO, 
            DEPTO = :DEPTO, 
            NOTAS = :NOTAS, 
            SEQ = :SEQ
        WHERE
            RESERVAID = :RESERVAID;

        IF (OLD_TIPO = 'M') THEN
            DELETE FROM RESERVA_MENSAL WHERE RESERVAID = :RESERVAID;
        ELSE IF (OLD_TIPO = 'S') THEN
            DELETE FROM RESERVA_SIMPLES WHERE RESERVAID = :RESERVAID;

        IF (OLD_TIPO = 'W') THEN
            UPDATE
                RESERVA_SEMANAL
            SET
                DATAIN = :DATAIN,
                DATAFIM = :DATAFIM,
                HORAIN = :HORAIN,
                HORAFIM = HORAFIM,
                SEG = :SEG,
                TER = :TER,
                QUA = :QUA,
                QUI = :QUI,
                SEX = :SEX,
                SAB = :SAB,
                DOM = :DOM,
                REVESA = :REVESA
            WHERE
                RESERVAID = :OUT_RESERVAID;
        ELSE
            INSERT INTO
                RESERVA_SEMANAL (RESERVAID, DATAIN, DATAFIM, HORAIN, HORAFIM, SEG, TER,
                                                QUA, QUI, SEX, SAB, DOM, REVESA)
            VALUES (:OUT_RESERVAID, :DATAIN, :DATAFIM, :HORAIN, :HORAFIM, :SEG, :TER, :QUA,
                            :QUI, :SEX, :SAB, :DOM, :REVESA);
    END

    SUSPEND;
END^

SET TERM ; ^

/* Definition for the `CREATE_RESERVA_SIMPLES` procedure :  */

SET TERM ^ ;

ALTER PROCEDURE CREATE_RESERVA_SIMPLES(
  RESERVAID INTEGER,
  SALAID INTEGER,
  USUARIOID INTEGER,
  ASSUNTO VARCHAR(255) CHARACTER SET ISO8859_1,
  DEPTO VARCHAR(80) CHARACTER SET ISO8859_1,
  NOTAS BLOB SUB_TYPE 1 CHARACTER SET ISO8859_1,
  DATA DATE,
  HORAIN TIME,
  HORAFIM TIME)
RETURNS(
  OUT_RESERVAID INTEGER,
  SEQ INTEGER)
AS
DECLARE VARIABLE I INT;
    DECLARE VARIABLE ID INT;
    DECLARE VARIABLE OLD_TIPO CHAR;
BEGIN
    SELECT FIRST 1
        R.RESERVAID
    FROM
        RESERVAS R JOIN RESERVA_SIMPLES RS ON
            R.RESERVAID = RS.RESERVAID
    WHERE
        (:SALAID = R.SALAID) AND
        (:DATA = RS.DATA) AND
            (((:HORAIN >= RS.HORAIN) AND (:HORAIN < RS.HORAFIM))
            OR
            ((:HORAFIM > RS.HORAIN) AND (:HORAFIM <= RS.HORAFIM))
            OR
            ((:HORAIN <= RS.HORAIN) AND (:HORAFIM > RS.HORAIN)))
    INTO
        I;

    IF (NOT (I IS NULL OR I = :RESERVAID)) THEN
        EXCEPTION EXPRESERVAHORA;
        
    SELECT FIRST 1
        R.RESERVAID
    FROM
        RESERVAS R JOIN RESERVA_SEMANAL RS ON
            R.RESERVAID = RS.RESERVAID
    WHERE
        (:SALAID = R.SALAID) AND
        (:DATA >= RS.DATAIN) AND
        (:DATA <= RS.DATAFIM) 
        AND
            (((:HORAIN >= RS.HORAIN) AND (:HORAIN < RS.HORAFIM))
            OR
            ((:HORAFIM > RS.HORAIN) AND (:HORAFIM <= RS.HORAFIM))
            OR
            ((:HORAIN <= RS.HORAIN) AND (:HORAFIM > RS.HORAIN)))
        AND
            :DATA IN (SELECT DIAS FROM GET_SEMANAL_DIAS(RS.RESERVAID, :DATA, :DATA))
    INTO
        I;

    IF (NOT (I IS NULL)) THEN
        EXCEPTION EXPRESERVAHORA;

    SEQ = GEN_ID(SEQRESERVAS, 1);

    IF ((:RESERVAID IS NULL) OR (:RESERVAID < 0)) THEN
    BEGIN
        OUT_RESERVAID = GEN_ID(GENRESERVAS, 1);

        INSERT INTO
            RESERVAS (RESERVAID, SALAID, USUARIOID, ASSUNTO, DEPTO, NOTAS, SEQ,
            TIPO)
        VALUES
            (:OUT_RESERVAID, :SALAID, :USUARIOID, :ASSUNTO, :DEPTO, :NOTAS,
            :SEQ, 'S');

        INSERT INTO
            RESERVA_SIMPLES (RESERVAID, DATA, HORAIN, HORAFIM)
        VALUES
            (:OUT_RESERVAID, :DATA, :HORAIN, :HORAFIM);
    END
    ELSE
    BEGIN
        OUT_RESERVAID = :RESERVAID;

        SELECT
            TIPO
        FROM
            RESERVAS
        WHERE
            RESERVAID = :RESERVAID
        INTO
            :OLD_TIPO;

        UPDATE
            RESERVAS
        SET
            SALAID = :SALAID,
            USUARIOID = :USUARIOID,
            ASSUNTO = :ASSUNTO,
            DEPTO = :DEPTO,
            NOTAS = :NOTAS,
            SEQ = :SEQ
        WHERE
            RESERVAID = :RESERVAID;

        IF (OLD_TIPO = 'M') THEN
            DELETE FROM RESERVA_MENSAL WHERE RESERVAID = :RESERVAID;
        ELSE IF (OLD_TIPO = 'W') THEN
            DELETE FROM RESERVA_SEMANAL WHERE RESERVAID = :RESERVAID;

        IF (OLD_TIPO = 'S') THEN
            UPDATE
                RESERVA_SIMPLES
            SET
                DATA = :DATA,
                HORAIN = :HORAIN,
                HORAFIM = :HORAFIM
            WHERE
                RESERVAID = :RESERVAID;
        ELSE
            INSERT INTO
                RESERVA_SIMPLES (DATA, HORAIN, HORAFIM)
            VALUES
                (:DATA, :HORAIN, :HORAFIM);
    END

    SUSPEND;
END^

SET TERM ; ^

/* Definition for the `GET_RESERVAS_SEMANA` procedure :  */

SET TERM ^ ;

ALTER PROCEDURE GET_RESERVAS_SEMANA(
  START DATE,
  ENDDT DATE)
RETURNS(
  RESERVAID INTEGER,
  SALAID INTEGER,
  DATA DATE,
  HORAIN TIME,
  HORAFIM TIME,
  USUARIOID INTEGER,
  USUARIO_NOME VARCHAR(255) CHARACTER SET ISO8859_1,
  ASSUNTO VARCHAR(255) CHARACTER SET ISO8859_1,
  DEPTO VARCHAR(80) CHARACTER SET ISO8859_1,
  NOTAS BLOB SUB_TYPE 1 CHARACTER SET ISO8859_1,
  SCHEMEID INTEGER,
  SEQ INTEGER,
  TIPO CHAR(1) CHARACTER SET ISO8859_1,
  DATAIN DATE,
  DATAFIM DATE)
AS
DECLARE VARIABLE I INTEGER;
DECLARE VARIABLE DOW INTEGER;
DECLARE VARIABLE DOM INTEGER;
DECLARE VARIABLE SEG INTEGER;
DECLARE VARIABLE TER INTEGER;
DECLARE VARIABLE QUA INTEGER;
DECLARE VARIABLE QUI INTEGER;
DECLARE VARIABLE SEX INTEGER;
DECLARE VARIABLE SAB INTEGER;
BEGIN  
    DATAIN = NULL;
    DATAFIM = NULL;
    --Reservas Simples
    FOR
        SELECT
            R.RESERVAID, R.SALAID, RS.DATA, RS.HORAIN, RS.HORAFIM,
            R.USUARIOID, U.NOME, R.ASSUNTO, R.DEPTO, R.NOTAS, U.SCHEMEID, R.SEQ, 
            R.TIPO
        FROM
            RESERVAS R JOIN USUARIOS U ON
                R.USUARIOID = U.USUARIOID
            JOIN RESERVA_SIMPLES RS ON
                R.RESERVAID = RS.RESERVAID
        WHERE
              RS.DATA BETWEEN :START AND :ENDDT
        INTO
            :RESERVAID, :SALAID, :DATA, :HORAIN, :HORAFIM, :USUARIOID,
            :USUARIO_NOME, :ASSUNTO, :DEPTO, :NOTAS, :SCHEMEID, :SEQ,
            :TIPO
    DO
        SUSPEND; 

    -- Reservas Semanais
    FOR
        SELECT
            R.RESERVAID, R.SALAID, RS.DATAIN, RS.DATAFIM, RS.HORAIN, RS.HORAFIM,
            R.USUARIOID, U.NOME, R.ASSUNTO, R.DEPTO, R.NOTAS, U.SCHEMEID, R.SEQ, 
            R.TIPO, RS.SEG, RS.TER, RS.QUA, RS.QUI, RS.SEX, RS.SAB, RS.DOM
        FROM
            RESERVAS R JOIN USUARIOS U ON
                R.USUARIOID = U.USUARIOID
            JOIN RESERVA_SEMANAL RS ON
                R.RESERVAID = RS.RESERVAID
        WHERE
            (RS.DATAIN <= :ENDDT) AND
            ((RS.DATAFIM IS NULL) OR (RS.DATAFIM >= :START))
        INTO
            :RESERVAID, :SALAID, :DATAIN, :DATAFIM, :HORAIN, :HORAFIM, :USUARIOID,
            :USUARIO_NOME, :ASSUNTO, :DEPTO, :NOTAS, :SCHEMEID, :SEQ,
            :TIPO, :SEG, :TER, :QUA, :QUI, :SEX, :SAB, :DOM
    DO
    BEGIN
        FOR
            SELECT
                DIAS
            FROM
                GET_SEMANAL_DIAS(:RESERVAID, :START, :ENDDT)
            WHERE
                DIAS BETWEEN :START AND :ENDDT
            INTO
                :DATA
            DO
                SUSPEND;
    END
END^

SET TERM ; ^

/* Definition for the `GET_SEMANAL_DIAS` procedure :  */

SET TERM ^ ;

ALTER PROCEDURE GET_SEMANAL_DIAS(
  RESERVAID INTEGER,
  DATAIN DATE,
  DATAFIM DATE)
RETURNS(
  DIAS DATE)
AS
DECLARE VARIABLE SEG SMALLINT;
DECLARE VARIABLE TER SMALLINT;
DECLARE VARIABLE QUA SMALLINT;
DECLARE VARIABLE QUI SMALLINT;
DECLARE VARIABLE SEX SMALLINT;
DECLARE VARIABLE SAB SMALLINT;
DECLARE VARIABLE DOM SMALLINT;
DECLARE VARIABLE VDATAIN DATE;
DECLARE VARIABLE VDATAFIM DATE;
DECLARE VARIABLE REVESA SMALLINT;
DECLARE VARIABLE I SMALLINT;
BEGIN
  SELECT
        SEG, TER, QUA, QUI, SEX, SAB, DOM,
        DATAIN, DATAFIM, REVESA
  FROM
      RESERVA_SEMANAL
  WHERE
       RESERVAID = :RESERVAID
  INTO
      :SEG, :TER, :QUA, :QUI, :SEX, :SAB, :DOM,
      :VDATAIN, :VDATAFIM, :REVESA;

  IF (DIAS < DATAIN) THEN
     DIAS = DATAIN;
  ELSE
    DIAS = VDATAIN;

  IF (VDATAFIM > DATAFIM) THEN
     VDATAFIM = DATAFIM;

  WHILE (DIAS <= VDATAFIM) DO
  BEGIN
        IF ((REVESA = 0) OR (MOD((DIAS - VDATAIN) / 7, 2) = 0)) THEN
        BEGIN
            I = EXTRACT(WEEKDAY FROM DIAS);

            IF ((I = 1) AND (SEG = 1)) THEN
                SUSPEND;
            ELSE IF ((I = 2) AND (TER = 1)) THEN
                SUSPEND;
            ELSE IF ((I = 3) AND (QUA = 1)) THEN
                SUSPEND;
            ELSE IF ((I = 4) AND (QUI = 1)) THEN
                SUSPEND;
            ELSE IF ((I = 5) AND (SEX = 1)) THEN
                SUSPEND;
            ELSE IF ((I = 6) AND (SAB = 1)) THEN
                SUSPEND;
            ELSE IF ((I = 0) AND (DOM = 1)) THEN
                SUSPEND;
        END
        
       DIAS = DIAS + 1;
  END
END^

SET TERM ; ^


/* Definition for the `INTEG_58` check :  */

ALTER TABLE RESERVA_SEMANAL ADD CHECK ("SEG" IN (0, 1));

/* Definition for the `INTEG_60` check :  */

ALTER TABLE RESERVA_SEMANAL ADD CHECK ("TER" IN (0, 1));

/* Definition for the `INTEG_62` check :  */

ALTER TABLE RESERVA_SEMANAL ADD CHECK ("QUA" IN (0, 1));

/* Definition for the `INTEG_64` check :  */

ALTER TABLE RESERVA_SEMANAL ADD CHECK ("QUI" IN (0, 1));

/* Definition for the `INTEG_66` check :  */

ALTER TABLE RESERVA_SEMANAL ADD CHECK ("SEX" IN (0, 1));

/* Definition for the `INTEG_68` check :  */

ALTER TABLE RESERVA_SEMANAL ADD CHECK ("SAB" IN (0, 1));

/* Definition for the `INTEG_70` check :  */

ALTER TABLE RESERVA_SEMANAL ADD CHECK ("DOM" IN (0, 1));

/* Definition for the `INTEG_72` check :  */

ALTER TABLE RESERVA_SEMANAL ADD CHECK ("REVESA" IN (0, 1));


/* Definition for the `FKSALAS` foreign key :  */

ALTER TABLE RESERVAS ADD CONSTRAINT FKSALAS FOREIGN KEY (SALAID) REFERENCES SALAS(SALAID) ON DELETE CASCADE ON UPDATE CASCADE;

/* Definition for the `FKUSUARIOS` foreign key :  */

ALTER TABLE RESERVAS ADD CONSTRAINT FKUSUARIOS FOREIGN KEY (USUARIOID) REFERENCES USUARIOS(USUARIOID) ON DELETE CASCADE ON UPDATE CASCADE;

/* Definition for the `FKRESERVA_MENSAL` foreign key :  */

ALTER TABLE RESERVA_MENSAL ADD CONSTRAINT FKRESERVA_MENSAL FOREIGN KEY (RESERVAID) REFERENCES RESERVAS(RESERVAID) ON DELETE CASCADE ON UPDATE CASCADE;

/* Definition for the `FKRESERVA_SEMANAL` foreign key :  */

ALTER TABLE RESERVA_SEMANAL ADD CONSTRAINT FKRESERVA_SEMANAL FOREIGN KEY (RESERVAID) REFERENCES RESERVAS(RESERVAID) ON DELETE CASCADE ON UPDATE CASCADE;

/* Definition for the `FKRESERVA_SIMPLES` foreign key :  */

ALTER TABLE RESERVA_SIMPLES ADD CONSTRAINT FKRESERVA_SIMPLES FOREIGN KEY (RESERVAID) REFERENCES RESERVAS(RESERVAID) ON DELETE CASCADE ON UPDATE CASCADE;

/* Definition for the `FK_SCHEME_USUARIOS` foreign key :  */

ALTER TABLE USUARIOS ADD CONSTRAINT FK_SCHEME_USUARIOS FOREIGN KEY (SCHEMEID) REFERENCES COLOR_SCHEME(SCHEMEID) ON DELETE SET NULL ON UPDATE CASCADE;


/* Definition for the `TRIG_EVT_RESERVA` trigger :  */

SET TERM ^ ;

CREATE TRIGGER TRIG_EVT_RESERVA FOR RESERVAS
ACTIVE AFTER INSERT OR UPDATE OR DELETE
POSITION 0
AS
BEGIN 
	IF (INSERTING) THEN
	BEGIN
		POST_EVENT 'reserva_ins';
	END
	ELSE IF (UPDATING) THEN
	BEGIN
		POST_EVENT 'reserva_upd';
	END
	ELSE IF (DELETING) THEN
	BEGIN
		POST_EVENT 'reserva_del';
	END
END^

SET TERM ; ^

/* Definition for the `TRIG_UPD_RESERVA` trigger :  */

SET TERM ^ ;

CREATE TRIGGER TRIG_UPD_RESERVA FOR RESERVAS
ACTIVE BEFORE INSERT OR UPDATE OR DELETE
POSITION 0
AS
BEGIN 
	IF (UPDATING OR INSERTING) THEN
		NEW.SEQ = GEN_ID(SEQRESERVAS, 1);
	ELSE
	BEGIN
		DELETE FROM
			DEL$RESERVAS D
		WHERE 
			D.DATA_DEL < CURRENT_DATE;
	
		INSERT INTO DEL$RESERVAS ("RESERVAID", "SEQ")
		VALUES (OLD.RESERVAID, GEN_ID(SEQRESERVAS, 1));
	END
END^

SET TERM ; ^


/* Privilegies for the `COLOR_SCHEME` :  */

GRANT SELECT, INSERT, DELETE, REFERENCES, UPDATE ON COLOR_SCHEME TO RS;

GRANT SELECT, INSERT, DELETE, REFERENCES, UPDATE ON COLOR_SCHEME TO SYSDBA WITH GRANT OPTION;


/* Privilegies for the `DEL$RESERVAS` :  */

GRANT SELECT, INSERT, DELETE, REFERENCES, UPDATE ON DEL$RESERVAS TO RS;

GRANT SELECT, INSERT, DELETE, REFERENCES, UPDATE ON DEL$RESERVAS TO SYSDBA WITH GRANT OPTION;


/* Privilegies for the `MODELOS` :  */

GRANT SELECT, INSERT, DELETE, REFERENCES, UPDATE ON MODELOS TO RS;

GRANT SELECT, INSERT, DELETE, REFERENCES, UPDATE ON MODELOS TO SYSDBA WITH GRANT OPTION;


/* Privilegies for the `RESERVAS` :  */

GRANT SELECT, INSERT, DELETE, REFERENCES, UPDATE ON RESERVAS TO RS;

GRANT SELECT, INSERT, DELETE, REFERENCES, UPDATE ON RESERVAS TO SYSDBA WITH GRANT OPTION;


/* Privilegies for the `RESERVA_MENSAL` :  */

GRANT SELECT, INSERT, DELETE, REFERENCES, UPDATE ON RESERVA_MENSAL TO SYSDBA WITH GRANT OPTION;


/* Privilegies for the `RESERVA_SEMANAL` :  */

GRANT SELECT, INSERT, DELETE, REFERENCES, UPDATE ON RESERVA_SEMANAL TO SYSDBA WITH GRANT OPTION;


/* Privilegies for the `RESERVA_SIMPLES` :  */

GRANT SELECT, INSERT, DELETE, REFERENCES, UPDATE ON RESERVA_SIMPLES TO SYSDBA WITH GRANT OPTION;


/* Privilegies for the `SALAS` :  */

GRANT SELECT, INSERT, DELETE, REFERENCES, UPDATE ON SALAS TO RS;

GRANT SELECT, INSERT, DELETE, REFERENCES, UPDATE ON SALAS TO SYSDBA WITH GRANT OPTION;


/* Privilegies for the `USUARIOS` :  */

GRANT SELECT, INSERT, DELETE, REFERENCES, UPDATE ON USUARIOS TO RS;

GRANT SELECT, INSERT, DELETE, REFERENCES, UPDATE ON USUARIOS TO SYSDBA WITH GRANT OPTION;



/* Privilegies for the `CREATE_RESERVA_MENSAL` :  */

GRANT EXECUTE ON PROCEDURE CREATE_RESERVA_MENSAL TO SYSDBA;


/* Privilegies for the `CREATE_RESERVA_SEMANAL` :  */

GRANT EXECUTE ON PROCEDURE CREATE_RESERVA_SEMANAL TO SYSDBA;


/* Privilegies for the `CREATE_RESERVA_SIMPLES` :  */

GRANT EXECUTE ON PROCEDURE CREATE_RESERVA_SIMPLES TO RS;

GRANT EXECUTE ON PROCEDURE CREATE_RESERVA_SIMPLES TO SYSDBA;


/* Privilegies for the `GET_RESERVAS_SEMANA` :  */

GRANT EXECUTE ON PROCEDURE GET_RESERVAS_SEMANA TO RS;

GRANT EXECUTE ON PROCEDURE GET_RESERVAS_SEMANA TO SYSDBA;


/* Privilegies for the `GET_SEMANAL_DIAS` :  */

GRANT EXECUTE ON PROCEDURE GET_SEMANAL_DIAS TO SYSDBA;



